Expanding the IntuBastionProps Interface
The IntuBastionProps interface has been extended to accommodate additional fields, and one of these new fields is the userData field. This extension aims to provide extra customization options and enhanced flexibility when configuring the bastion host. Let's dive into the userData field and explore how it elevates the functionality:

Introducing the userData Field
The userData field within the IntuBastionProps interface enables you to specify user data scripts that will be executed during the launch of the bastion host. These user data scripts essentially consist of shell commands that run on the EC2 instance as it starts up. They are commonly used to perform various setup tasks, software installations, and configurations.

Incorporating an Error-Checking Mechanism in User Data
To ensure the successful execution of commands within the user data scripts and to capture their outcomes, an error-checking mechanism has been introduced within these scripts. Let's break down how this mechanism operates:

Logging
In the current design, the user data script includes commands for capturing both successful and failed executions into a log file. This log file serves as a record of events during the execution of the user data script. Here's an example of how this is achieved:

bash
Copy code
check_err() {
  if [ $? -ne 0 ]; then
    echo "Error in $1..." >> /userdata.log
  else
    echo "$1 ran successfully" >> /userdata.log
  fi
}
The check_err function is defined to inspect the exit code of the preceding command.
If the exit code is non-zero (indicating an error), it appends an error message to the userdata.log file.
If the exit code is zero (indicating success), it appends a success message to the same log file.
This approach ensures that any issues or errors encountered during script execution are recorded in the log file, facilitating future troubleshooting efforts.

Advantages of Troubleshooting

The inclusion of this error-checking and logging mechanism brings several advantages:

Transparency: You can easily monitor the execution status of each command within the user data script. This transparency aids in understanding the events that transpired during instance launch.

Debugging: In the event of errors or unexpected behavior, you possess a log file containing error messages, simplifying the identification and resolution of issues.

Documentation: The log file functions as documentation for the configuration and setup process of the bastion host. It can be referenced for future use or auditing purposes.

Troubleshooting: If the bastion host encounters post-launch issues, the log file can be consulted to identify failed commands and investigate the root causes of the problems.

In summary, the userData field, coupled with error-checking and logging mechanisms, enhances the flexibility and ease of troubleshooting within the IntuBastion construct. This enhancement enables you to tailor the setup process to your requirements and maintain a comprehensive record of its execution. This is especially valuable when configuring complex EC2 instances like bastion hosts in the AWS environment.

Moreover, we have introduced the capability to specify and attach an existing Elastic IP (EIP) to the bastion host, offering several benefits. This feature is particularly valuable when a consistent and stable public IP address is required for our bastion host.

In AWS, security groups serve as virtual firewalls controlling both inbound and outbound traffic for EC2 instances. By incorporating the capability to specify and include existing security groups in the IntuBastion construct, you gain enhanced control over the network security configuration of the bastion host. When configuring the IntuBastion construct, you have the option to provide an array of securityGroupIds as part of the IntuBastionProps. These securityGroupIds represent the unique identifiers of existing security groups in AWS. This inclusion empowers you to define and enforce precise access rules for the bastion host, offering flexibility and reusability. This feature is especially beneficial in scenarios prioritizing security and demanding fine-grained control over network traffic.


import * as cdk from "aws-cdk-lib";
import * as asg from "aws-cdk-lib/aws-autoscaling";
import * as ec2 from "aws-cdk-lib/aws-ec2";
import * as iam from "aws-cdk-lib/aws-iam";
import * as r53 from "aws-cdk-lib/aws-route53";
import * as cr from "aws-cdk-lib/custom-resources";
import { Construct } from "constructs";
import { AmiQuery } from "./custom-resources";
import { Restacker } from "./restacker";
import { SecurityGroupFinder } from "./security-group-finder";
import { userdata_with_errcheck } from "../../../utils/cdk-utils-syseng"


export interface IntuBastionProps {
  readonly appEnv: string;
  readonly vpc: ec2.IVpc;

  readonly amiId?: string;
  readonly disableRestacker?: boolean;
  readonly enableLoginShell?: boolean;
  readonly enforceSELinux?: boolean;
  readonly instanceType?: string;
  readonly keyName?: string;
  readonly osVersion?: string;
  readonly publicHostedZoneId?: string;
  readonly publicHostedZoneName?: string;
  readonly rootVolumeSize?: number;
  readonly lambdaSubnets?: ec2.SubnetSelection;
  readonly ingressSubnets?: ec2.SubnetSelection;
  readonly userData?: string;
  readonly plainUserData?: string;
  readonly eipAllocId?: string;
  readonly securityGroupIds?: string[];
}

export class IntuBastion extends Construct {
  readonly securityGroup: ec2.ISecurityGroup;

  constructor(scope: Construct, name: string, props: IntuBastionProps) {
    super(scope, name);
    const stack = cdk.Stack.of(this);
    const vpc = props.vpc;
    const lambdaSubnets =
      props.lambdaSubnets ?? this.subnetSelectionForType("private", vpc.vpcId);
    const ingressSubnets =
      props.ingressSubnets ?? this.subnetSelectionForType("ingress", vpc.vpcId);

    // custom resources for ami and secgroup ingress
    const osVersion = props.osVersion ?? "amzn2-latest-arm64";
    const amiId: string =
      props.amiId ?? new AmiQuery(this, "AmiQuery", { osVersion }).amiId;

    const amiParam = new cdk.CfnParameter(this, "AmiId", {
      default: "auto",
      allowedPattern: "^(?:ami-[0-9a-f]{8}|ami-[0-9a-f]{17}|auto)$",
    });
    const amiCondition = new cdk.CfnCondition(this, "QueryAmi", {
      expression: cdk.Fn.conditionEquals(amiParam, "auto"),
    });

    const miByRegion: { [region: string]: any } = {};
    miByRegion[stack.region] = cdk.Fn.conditionIf(
      amiCondition.logicalId,
      amiId,
      amiParam
    );

    let sgId = new SecurityGroupFinder(this, "SecurityGroupFinder", {
      vpc: vpc,
      vpcSubnets: lambdaSubnets,
    }).sgId;

    const securityGroup = ec2.SecurityGroup.fromSecurityGroupId(
      this,
      "SecurityGroup",
      sgId,
      {
        mutable: false,
      }
    );
    this.securityGroup = securityGroup;

    

    if (!props.disableRestacker) {
      new Restacker(this, "Restacker", {
        paramId: stack.getLogicalId(amiParam),
        osVersion,
        vpc,
        vpcSubnets: lambdaSubnets,
      });
    }

    // enable overriding ebs volume size, otherwise default to ami defined block devices
    let blockDevices: asg.BlockDevice[] | undefined;
    if (props.rootVolumeSize) {
      blockDevices = this.createBlockDevices(
        amiId,
        props.appEnv,
        props.rootVolumeSize
      );
    }

    let eipAllocId: string = ""

    console.log("this is eip!!!!!", eipAllocId)

    if (props.eipAllocId) {

      eipAllocId = props.eipAllocId
 
    }else {
      const eip = new ec2.CfnEIP(this, "Eip", {
        domain: "vpc",
      });

      new cdk.CfnOutput(this, "EIP", {
        description: "The EIP of the bastion host",
        value: eip.ref,
      });
  
      if (props.publicHostedZoneId && props.publicHostedZoneName) {
        const zone = r53.HostedZone.fromHostedZoneAttributes(
          this,
          "PublicHostedZone",
          {
            hostedZoneId: props.publicHostedZoneId,
            zoneName: props.publicHostedZoneName,
          }
        );
  
        const arec = new r53.ARecord(this, "RecordSet", {
          zone,
          recordName: `${name}-${vpc.vpcId}.${props.publicHostedZoneName}`,
          target: r53.RecordTarget.fromIpAddresses(eip.ref),
          ttl: cdk.Duration.minutes(10),
        });
  
        new cdk.CfnOutput(this, "DNSName", {
          description: "The DNS name of the bastion host",
          value: arec.domainName,
        });
      }
      eipAllocId = eip.getAtt( "AllocationId").toString()

    }

    console.log("here is eip!!!!!", eipAllocId)

    const role = new iam.Role(this, "AsgRole", {
      assumedBy: new iam.ServicePrincipal("ec2.amazonaws.com"),
      managedPolicies: [
        iam.ManagedPolicy.fromManagedPolicyArn(
          this,
          "ManagedPolicy",
          `arn:aws:iam::${stack.account}:policy/intuit-ssm-policy`
        ),
      ],
    });

    role.addToPolicy(
      new iam.PolicyStatement({
        resources: ["*"],
        actions: ["ec2:AssociateAddress", "cloudformation:DescribeStackResource", "cloudformation:SignalResource"],
      })
    );
    
    const grp = new asg.AutoScalingGroup(this, "Asg", {
      vpc,
      vpcSubnets: ingressSubnets,
      role,
      blockDevices,
      autoScalingGroupName: `${name}-${vpc.vpcId}-${props.appEnv}`,
      instanceType: new ec2.InstanceType(props.instanceType ?? "t4g.micro"),
      machineImage: new ec2.GenericLinuxImage(miByRegion),
      requireImdsv2: false,
      keyName: props.keyName,
      minCapacity: 1,
      maxCapacity: 1,
      signals: asg.Signals.waitForMinCapacity({
        timeout: cdk.Duration.minutes(20),
      }),
      updatePolicy: asg.UpdatePolicy.rollingUpdate({
        pauseTime: cdk.Duration.minutes(20),
      }),
    });

    let securityGroupIds: any[] = [];
    if (props.securityGroupIds === undefined){
      securityGroupIds = [];
      grp.addSecurityGroup(securityGroup);
    } else {
      securityGroupIds = props.securityGroupIds;
    }

    for (const sg of securityGroupIds) {
      const sgid = ec2.SecurityGroup.fromSecurityGroupId(this, `${sg}-${vpc.vpcId}-${props.appEnv}`, sg, {
      mutable: false
      });
      grp.addSecurityGroup(sgid);
    }

    console.log("!!!!!XXX@@@@", grp.node.tryFindChild("ASG")?.node.metadata[0].data)

    // new cdk.CfnOutput(this, "Asg", {
    //   description: "The id of autoscaling group",
    //   value: grp.node.id
    // });



    console.log("!!!!!!!!", props.userData)

  
    if (!props.plainUserData) {
    grp.addUserData(`#!/bin/bash -ex
# Ensure our PATH is set correctly (on Amazon Linux, cfn-signal is in /opt/aws/bin)

check_err() {
  if [ $? -ne 0 ]; then
    echo "Error in $1..." >> /userdata.log
  else
    echo "$1 ran successfully" >> /userdata.log
  fi
}

###SYSENGCOMMAND100###
. ~/.bash_profile


check_err SYSENGCOMMAND100


###SYSENGCOMMAND200###
touch userdata.log


check_err SYSENGCOMMAND200


# Create a session token lasting 5 minutes (300 seconds)

###SYSENGCOMMAND300###
TOKEN=$(curl -s -H "X-aws-ec2-metadata-token-ttl-seconds: 300" -X PUT http://169.254.169.254/latest/api/token)



check_err SYSENGCOMMAND300


# Associate the EIP

###SYSENGCOMMAND400###
INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)


check_err SYSENGCOMMAND400


###SYSENGCOMMAND500###
echo "SSH_IDENTIFIER=\"bastion\"" >> /etc/environment
check_err SYSENGCOMMAND500
`)
    }

    //prettier-ignore
    if (props.plainUserData) {

      grp.addUserData(props.plainUserData)

    }else if (props.userData) {
      console.log(`!!!!!!!!adding user data ${props.userData}`)
      grp.addUserData(userdata_with_errcheck(props.userData))

    }
    else{
        grp.addUserData(
            `#!/bin/bash -x
# Ensure our PATH is set correctly (on Amazon Linux, cfn-signal is in /opt/aws/bin)
. ~/.bash_profile
# Create a session token lasting 5 minutes (300 seconds)
TOKEN=$(curl -s -H "X-aws-ec2-metadata-token-ttl-seconds: 300" -X PUT http://169.254.169.254/latest/api/token)
# Associate the EIP
INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
echo "SSH_IDENTIFIER=\"bastion\"" >> /etc/environment`);


  }
//   #aws ec2 associate-address --region ${ stack.region } --allocation-id ${eip.getAtt( "AllocationId")} --instance-id $INSTANCE_ID
// cfn-signal --region ${ stack.region } --resource ${ stack.getLogicalId(grp.node.defaultChild as asg.CfnAutoScalingGroup) } --stack ${ stack.stackId } --exit-code $?
  // add selinux and nologin commands
    if (props.enforceSELinux) {
      grp.addUserData("###SYSENGCOMMAND100000###");
      grp.addUserData(
        "setenforce enforcing; cp /etc/selinux/config /etc/selinux/config.ORIG; sed 's/SELINUX=permissive/SELINUX=enforcing/' /etc/selinux/config.ORIG > /etc/selinux/config"
      );
      grp.addUserData(`

check_err SYSENGCOMMAND100000


      `);
    }

    if (!props.enableLoginShell) {
      grp.addUserData("###SYSENGCOMMAND101000###");
      grp.addUserData('echo NOLOGIN="yes" >> /etc/environment');
      grp.addUserData(`

check_err SYSENGCOMMAND101000


      `);
    }

    grp.addUserData("###SYSENGCOMMAND102000###");
    grp.addUserData(`TOKEN=$(curl -s -H "X-aws-ec2-metadata-token-ttl-seconds: 300" -X PUT http://169.254.169.254/latest/api/token)`)
    grp.addUserData(`

check_err SYSENGCOMMAND102000


    `);

    grp.addUserData("###SYSENGCOMMAND103000###");
    grp.addUserData(`INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)`)
    grp.addUserData(`

check_err SYSENGCOMMAND103000

    `);

    grp.addUserData("###SYSENGCOMMAND104000###");
    grp.addUserData(`#aws ec2 associate-address --region ${ stack.region } --allocation-id ${eipAllocId} --instance-id $INSTANCE_ID`)
    grp.addUserData(`

check_err SYSENGCOMMAND104000

    `);


    // grp.addUserData(`#aws ec2 associate-address --region ${ stack.region } --allocation-id ${eip.getAtt( "AllocationId")} --instance-id $INSTANCE_ID`)
    grp.addUserData("###SYSENGCOMMAND105000###");
    grp.addUserData(`cfn-signal --region ${ stack.region } --resource ${ stack.getLogicalId(grp.node.defaultChild as asg.CfnAutoScalingGroup) } --stack ${ stack.stackId } --exit-code $(cat userdata.log | wc -l)`)
    grp.addUserData(`

check_err SYSENGCOMMAND105000
    `)

    console.log("@@@@@@!!!!!!!!", grp.userData)

  }

  private createBlockDevices(
    amiId: string,
    appEnv: string,
    rootVolumeSize: number
  ) {
    const stack = cdk.Stack.of(this);
    const describeImages = {
      service: "EC2",
      action: "describeImages",
      parameters: { ImageIds: [amiId] },
      physicalResourceId: cr.PhysicalResourceId.of(
        `AmiDescribe-${appEnv}-${stack.stackId}`
      ),
    };
    const describeImagesResponse = new cr.AwsCustomResource(
      this,
      "AmiDescribeCR",
      {
        onCreate: describeImages,
        onUpdate: describeImages,
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({
          resources: cr.AwsCustomResourcePolicy.ANY_RESOURCE,
        }),
      }
    );
    const blockDevices = [];
    blockDevices.push({
      deviceName: describeImagesResponse.getResponseField(
        "Images.0.RootDeviceName"
      ),
      volume: asg.BlockDeviceVolume.ebs(rootVolumeSize, {
        encrypted: true,
        volumeType: asg.EbsDeviceVolumeType.GP3,
      }),
    });
    return blockDevices;
  }

  private subnetSelectionForType(
    subnetType: string,
    vpcId: string
  ): ec2.SubnetSelection {
    const subnetIds = cdk.Fn.split(
      ",",
      cdk.Fn.importValue(`${vpcId}:${subnetType}-subnet:ids`)
    );

    return {
      subnets: subnetIds.map((id, idx) =>
        ec2.Subnet.fromSubnetId(this, `${subnetType}${idx}`, id)
      ),
    };
  }

}
