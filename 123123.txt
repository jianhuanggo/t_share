    CREATE TABLE IF NOT EXISTS concurrency_control (
        task_id STRING,
        start_time TIMESTAMP,
        end_time TIMESTAMP
    ) USING DELTA


xx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
###Add below code to the beginning of each task’s notebook:


from pyspark.sql import functions as F
import time

_MAX_CONCURRENT_TASKS_ = 4
_WAIT_TIME_ = 20


running_tasks = spark.sql("""
    SELECT COUNT(*) AS running_tasks
    FROM concurrency_control
    WHERE end_time IS NULL
""").collect()[0]["running_tasks"]

if running_tasks >= _MAX_CONCURRENT_TASKS_:
    print(f"Concurrency limit reached. Waiting for a slot...")
    while running_tasks >= _MAX_CONCURRENT_TASKS_
        time.sleep(_WAIT_TIME_) 
        running_tasks = spark.sql("""
            SELECT COUNT(*) AS running_tasks
            FROM concurrency_control
            WHERE end_time IS NULL
        """).collect()[0]["running_tasks"]


task_id = "task_1"  # Replace with a unique task ID
spark.sql(f"""
    INSERT INTO concurrency_control (task_id, start_time)
    VALUES ('{task_id}', current_timestamp())
""")


###Add below code to the end of each task’s notebook:

spark.sql(f"""
    UPDATE concurrency_control
    SET end_time = current_timestamp()
    WHERE task_id = '{task_id}'
""")


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fusion-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: fusion-app
  template:
    metadata:
      labels:
        app: fusion-app
    spec:
      containers:
      - name: fusion-app-container
        image: <your-container-image> 
        ports:
        - containerPort: 8081

---
apiVersion: v1
kind: Service
metadata:
  name: fusion-app-service
spec:
  selector:
    app: fusion-app
  type: LoadBalancer
  ports:
  - protocol: TCP
    port: 80 # ALB listener port
    targetPort: 8081

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fusion-app-ingress
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fusion-app-service
            port:
              number: 80




# Use a base image with Java 11
FROM openjdk:11-jre-slim

# Set the working directory in the container
WORKDIR /app

# Copy the application property file to the container
COPY application.properties .

# Copy the JAR file to the container
COPY your-app.jar app.jar

# Expose the port your application listens on
EXPOSE 8081

# Set environment variables for memory settings (adjust as needed)
ENV JAVA_OPTS="-Xmx4g -Xms2g"

# Define the command to run your application
CMD ["java", "$JAVA_OPTS", "-jar", "app.jar"]





kubectl exec -it <pod-name> -c <container-name> -- /bin/bash

kubectl exec -it my-app-pod -c my-app-container -- /bin/bash

telnet <your-rds-endpoint> <your-rds-port>

kubectl get ingress your-app-ingress

http://<alb-address>/


apiVersion: networking.k8s.io/v1
kind: Ingress
# ... other parts of the Ingress ...
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: your-app-service
            port:
              number: 80
      - path: /admin
        pathType: Prefix
        backend:
          service:
            name: my-other-service
            port:
              number: 80

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Federated": "arn:aws:iam::936379345511:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/429E072A69CFCAB1A3D01E08A80843B9"
      },
      "Action": "sts:AssumeRoleWithWebIdentity",
      "Condition": {
        "StringEquals": {
          "oidc.eks.us-east-1.amazonaws.com/id/429E072A69CFCAB1A3D01E08A80843B9:sub": "system:serviceaccount:kube-system:aws-load-balancer-controller",
          "oidc.eks.us-east-1.amazonaws.com/id/429E072A69CFCAB1A3D01E08A80843B9:aud": "sts.amazonaws.com"
        }
      }
    }
  ]
}

aws iam create-role \
  --role-name eks-alb-role \
  --assume-role-policy-document file://trust-policy.json

aws iam attach-role-policy \
  --role-name eks-alb-role \
  --policy-arn arn:aws:iam::936379345511:policy/ism-policy-eks-alb

aws iam get-role --role-name eks-alb-role

aws iam list-attached-role-policies --role-name eks-alb-role



You can modify your Dockerfile to install nginx, configure it as a health check on port 80, and still run your Java application. Below is an improved version of your Dockerfile with these changes:

Modified Dockerfile

# Use Amazon Linux 2023 as the base image
FROM amazonlinux:2023

# Update the system and install Amazon Corretto JDK (Java 11) and Nginx
RUN dnf update -y && \
    dnf install -y java-11-amazon-corretto nginx && \
    dnf clean all

# Set the default Java version
ENV JAVA_HOME=/usr/lib/jvm/java-11-amazon-corretto
ENV PATH=$JAVA_HOME/bin:$PATH

# Verify Java installation
RUN java -version

# Set working directory
WORKDIR /app

# Copy application files
COPY application.properties .
COPY fusion.jar fusion.jar

# Expose ports
EXPOSE 8080 8443 80

# Configure Nginx as a health check server
RUN echo "server { \
    listen 80; \
    location /health { \
        return 200 'Healthy'; \
        add_header Content-Type text/plain; \
    } \
}" > /etc/nginx/conf.d/default.conf

# Start Nginx in the background and then run the Java application
CMD ["sh", "-c", "nginx && java $JAVA_OPTS -jar fusion.jar"]

# Health check to ensure Nginx is running
HEALTHCHECK --interval=30s --timeout=5s --retries=3 \
    CMD curl --fail http://localhost/health || exit 1

Changes & Explanation

1. Install Nginx (dnf install -y nginx) so it can serve as a lightweight health check server.


2. Expose Port 80 along with Java application ports (8080, 8443).


3. Configure Nginx to serve a simple health check endpoint (/health) that returns 200 OK.


4. Run Nginx in the background before launching the Java application (sh -c "nginx && java $JAVA_OPTS -jar fusion.jar").


5. Add a Health Check (HEALTHCHECK) that regularly pings http://localhost/health to verify Nginx is running.



This ensures your container is healthy while still running your Java application. Let me know if you need further adjustments!









m


apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: fusion-app-2
  name: healthcheck-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: healthcheck
  template:
    metadata:
      labels:
        app: healthcheck
    spec:
      containers:
        - name: healthcheck-container
          image: <AWS_ACCOUNT_ID>.dkr.ecr.<AWS_REGION>.amazonaws.com/healthcheck-app:latest
          ports:
            - containerPort: 8081
          readinessProbe:
            httpGet:
              path: /health
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10

apiVersion: v1
kind: Service
metadata:
  namespace: fusion-app-2
  name: healthcheck-service
spec:
  selector:
    app: healthcheck
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
  type: ClusterIP


apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: fusion-app-2
  name: fusion-app-ingress
  annotations:
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
    alb.ingress.kubernetes.io/group.name: "fusion-alb"
    alb.ingress.kubernetes.io/healthcheck-path: "/"
    alb.ingress.kubernetes.io/healthcheck-port: "8080"
    alb.ingress.kubernetes.io/success-codes: "302"
    alb.ingress.kubernetes.io/load-balancer-name: "fusion-alb-3"
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          # Existing route for /fusion
          - path: /fusion
            pathType: Prefix
            backend:
              service:
                name: fusion-app-service
                port:
                  number: 80
          # New route for /healthcheck
          - path: /healthcheck
            pathType: Prefix
            backend:
              service:
                name: healthcheck-service
                port:
                  number: 8081  # Port of the healthcheck deployment


