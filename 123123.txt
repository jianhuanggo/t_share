    CREATE TABLE IF NOT EXISTS concurrency_control (
        task_id STRING,
        start_time TIMESTAMP,
        end_time TIMESTAMP
    ) USING DELTA



###Add below code to the beginning of each task’s notebook:


from pyspark.sql import functions as F
import time

_MAX_CONCURRENT_TASKS_ = 4
_WAIT_TIME_ = 20


running_tasks = spark.sql("""
    SELECT COUNT(*) AS running_tasks
    FROM concurrency_control
    WHERE end_time IS NULL
""").collect()[0]["running_tasks"]

if running_tasks >= _MAX_CONCURRENT_TASKS_:
    print(f"Concurrency limit reached. Waiting for a slot...")
    while running_tasks >= _MAX_CONCURRENT_TASKS_
        time.sleep(_WAIT_TIME_) 
        running_tasks = spark.sql("""
            SELECT COUNT(*) AS running_tasks
            FROM concurrency_control
            WHERE end_time IS NULL
        """).collect()[0]["running_tasks"]


task_id = "task_1"  # Replace with a unique task ID
spark.sql(f"""
    INSERT INTO concurrency_control (task_id, start_time)
    VALUES ('{task_id}', current_timestamp())
""")


###Add below code to the end of each task’s notebook:

spark.sql(f"""
    UPDATE concurrency_control
    SET end_time = current_timestamp()
    WHERE task_id = '{task_id}'
""")



apiVersion: apps/v1
kind: Deployment
metadata:
  name: your-app-deployment
spec:
  replicas: 3 # Adjust the number of replicas as needed
  selector:
    matchLabels:
      app: your-app
  template:
    metadata:
      labels:
        app: your-app
    spec:
      containers:
      - name: your-app-container
        image: <your-container-image> # Replace with your container image URI
        ports:
        - containerPort: <your-app-port> # Replace with your application's port

---
apiVersion: v1
kind: Service
metadata:
  name: your-app-service
spec:
  selector:
    app: your-app
  type: LoadBalancer # This will provision an ALB
  ports:
  - protocol: TCP
    port: 80 # ALB listener port
    targetPort: <your-app-port> # Your application's port

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: your-app-ingress
  annotations:
    kubernetes.io/ingress.class: alb # Use the ALB Ingress controller
    alb.ingress.kubernetes.io/scheme: internet-facing # Or internal if needed
    alb.ingress.kubernetes.io/target-type: ip # Use IP mode for private subnet
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: your-app-service
            port:
              number: 80
