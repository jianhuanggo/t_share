    CREATE TABLE IF NOT EXISTS concurrency_control (
        task_id STRING,
        start_time TIMESTAMP,
        end_time TIMESTAMP
    ) USING DELTA



###Add below code to the beginning of each task’s notebook:


from pyspark.sql import functions as F
import time

_MAX_CONCURRENT_TASKS_ = 4
_WAIT_TIME_ = 20


running_tasks = spark.sql("""
    SELECT COUNT(*) AS running_tasks
    FROM concurrency_control
    WHERE end_time IS NULL
""").collect()[0]["running_tasks"]

if running_tasks >= _MAX_CONCURRENT_TASKS_:
    print(f"Concurrency limit reached. Waiting for a slot...")
    while running_tasks >= _MAX_CONCURRENT_TASKS_
        time.sleep(_WAIT_TIME_) 
        running_tasks = spark.sql("""
            SELECT COUNT(*) AS running_tasks
            FROM concurrency_control
            WHERE end_time IS NULL
        """).collect()[0]["running_tasks"]


task_id = "task_1"  # Replace with a unique task ID
spark.sql(f"""
    INSERT INTO concurrency_control (task_id, start_time)
    VALUES ('{task_id}', current_timestamp())
""")


###Add below code to the end of each task’s notebook:

spark.sql(f"""
    UPDATE concurrency_control
    SET end_time = current_timestamp()
    WHERE task_id = '{task_id}'
""")


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fusion-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: fusion-app
  template:
    metadata:
      labels:
        app: fusion-app
    spec:
      containers:
      - name: fusion-app-container
        image: <your-container-image> 
        ports:
        - containerPort: 8081

---
apiVersion: v1
kind: Service
metadata:
  name: fusion-app-service
spec:
  selector:
    app: fusion-app
  type: LoadBalancer
  ports:
  - protocol: TCP
    port: 80 # ALB listener port
    targetPort: 8081

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fusion-app-ingress
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fusion-app-service
            port:
              number: 80




# Use a base image with Java 11
FROM openjdk:11-jre-slim

# Set the working directory in the container
WORKDIR /app

# Copy the application property file to the container
COPY application.properties .

# Copy the JAR file to the container
COPY your-app.jar app.jar

# Expose the port your application listens on
EXPOSE 8081

# Set environment variables for memory settings (adjust as needed)
ENV JAVA_OPTS="-Xmx4g -Xms2g"

# Define the command to run your application
CMD ["java", "$JAVA_OPTS", "-jar", "app.jar"]





kubectl exec -it <pod-name> -c <container-name> -- /bin/bash

kubectl exec -it my-app-pod -c my-app-container -- /bin/bash

telnet <your-rds-endpoint> <your-rds-port>

kubectl get ingress your-app-ingress

http://<alb-address>/


apiVersion: networking.k8s.io/v1
kind: Ingress
# ... other parts of the Ingress ...
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: your-app-service
            port:
              number: 80
      - path: /admin
        pathType: Prefix
        backend:
          service:
            name: my-other-service
            port:
              number: 80
