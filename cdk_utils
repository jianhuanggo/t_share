const fs = require("fs");
const fsp = require("fs").promise;
import { hashmap } from "aws-sdk/clients/glacier";

export interface VpcType {
    VpcId?: string;
    Tags: { Key: string, Value: string }[]
    [key: string]: any
  }
  
export interface SubnetType {
  AvailabilityZone?: string;
  SubnetId?: string;
  Tags: { Key: string, Value: string }[]
  [key: string]: any
}

export interface MapType {
  [key: string]: any
}

/**
 * A simple wrapper to perform lookup up operation on a hashmap
 * @param obj a hashmap
 * @param key a key of hashmap
 * @param default_value if the key doesn't exist, return this
 * @returns return the result of key based lookup
 */

export function map_get(obj: hashmap, key: string, default_value: any = ""): any {
    var result: string = obj[key];
    return (typeof result !== "undefined") ? result : default_value;
}

/**
 * read file synchronously
 * @param filepath absolute filename path
 * @returns return file content
 */

export function readfile_sync (filepath: string) {
  try {
      return fs.readFileSync(filepath, 'utf-8');
  }catch (error) {
      throw Error("something is wrong in function readfile_sync" + JSON.stringify(error));
  }
}
  
/**
 * this function gets the name of aws resources (for example VPC or subnet) which is an aws tag that has the attribute "Key"="Name"
 * @param vpc_tag an array of tags
 * @returns return the name of the aws resource
 */

export function get_name(vpc_tag: MapType[] | undefined): string {

  let object_name: string = ""
  if (vpc_tag === undefined) {
    return object_name
  }

  vpc_tag.forEach(each_tag => {
      if (map_get(each_tag, "Key") == "Name") { 
          object_name = map_get(each_tag, "Value")
      }
  }
  );
  return object_name
}

/**
 * this async function returns the corresponding vpc id given a vpc name
 * @param aws_ec2 aws ec2 client object
 * @param vpc_name the name of vpc
 * @returns return a promise contains the vpc id
 */

export async function get_vpc_id(aws_ec2: any, vpc_name: string): Promise<string> {
  
    let vpc_id = "";
    const response = await aws_ec2.describeVpcs().promise();
    const data: VpcType[] = response.Vpcs;
    data.forEach(each_vpc => {
        if (get_name(each_vpc.Tags) == vpc_name) {
            vpc_id = map_get(each_vpc, "VpcId")
        }
    }
    );
    return vpc_id
}

/**
 * this async function returns the corresponding vpc name given a vpc id
 * @param aws_ec2 aws ec2 client object
 * @param vpc_id the vpc id
 * @returns return a promise contains the vpc name
 */
  
export async function get_vpc_name(aws_ec2: any, vpc_id: string): Promise<string> {

  let vpc_name: string = "";
  const response = await aws_ec2.describeVpcs().promise();
  console.log(response)
  const data: VpcType[] = response.Vpcs;
  data.forEach(each_vpc => {
      if (map_get(each_vpc, "VpcId") == vpc_id) {
        vpc_name = get_name(each_vpc.Tags)
      }
  }
  );
  return vpc_name
}

/**
 * this async function returns a set of required information for intuit bastion
 * @param aws_ec2 aws ec2 client object
 * @param subnet_ids a list of subnet ids
 * @param vpc_id the vpc id
 * @returns return a promise contains a map that comprised of a list of availablity zones and a list public subnet ids 
 */
  
export async function get_subnets(aws_ec2: any, subnet_ids: string[], vpc_id: string): Promise<MapType> {

  let availability_zone: string[] = [];
  let public_subnet_ids: string[] = [];

  const response = await aws_ec2.describeSubnets().promise();
  const data: SubnetType[] = response.Subnets;
  data.forEach(each_subnet => {

      const target_subnet_tags: MapType[] = each_subnet.Tags
      let target_subnet_name = get_name(target_subnet_tags);
      
      if (map_get(each_subnet, 'VpcId') == vpc_id && subnet_ids.indexOf(target_subnet_name) >= 0)
        {
            availability_zone.push(map_get(each_subnet, 'AvailabilityZone'))
            public_subnet_ids.push(map_get(each_subnet, 'SubnetId'))
        }
      }
  );
  return {'availability_zone': availability_zone, 'public_subnet_ids': public_subnet_ids}
}


/**
 * read file asynchronously
 * @param filepath absolute filename path
 * @returns return file content
 */

export async function readfile (filepath: string) {
  try {
      return await fsp.readFile(filepath, 'utf-8');
  }catch (error) {
      throw Error("something is wrong in function readfile" + JSON.stringify(error));
  }
}

/**
 * read file asynchronously
 * @param filepath absolute filename path
 * @returns return userdata content with error checking
 */
export function userdata_with_errcheck(userdata: string): string {
  let parse_command = []
  try {
      let command_num = 1000;

      // init()
      let code_block = ""
      let code_header = true
      const lines = userdata.split("\n")

      for (let line of lines) {
          console.log(line)
          if (line.startsWith("#SYSENGCOMMAND")) {
              parse_command.push(code_block)
              if (!code_header) {
                  parse_command.push("check_err SYSENGCOMMAND" + command_num.toString())
                  
              }
              code_header = false
              command_num += 100
              code_block = "\n\n###SYSENGCOMMAND" + command_num.toString() + "###\n"
          }else {
              code_block += line + "\n"
          }  
      }
      if (code_block) {
          parse_command.push(code_block)
          parse_command.push("check_err SYSENGCOMMAND" + command_num.toString())
      }
      return parse_command.join("\n")

  }catch(error){
      throw Error("something is wrong in function userdata_with_errcheck" + JSON.stringify(error));
  }
}


map_get: This function performs a key-based lookup on a hashmap. It takes a hashmap (obj), a key to search for, and an optional default_value to return if the key doesn't exist. It returns the value associated with the key or the default value if the key is not found.

readfile_sync: This function reads a file synchronously. It takes an filepath (the absolute filename path) as an argument and returns the content of the file as a string. If any error occurs during reading, it throws an error.

get_name: This function is used to retrieve the name of an AWS resource (e.g., VPC or subnet) based on the AWS tags associated with it. It takes an array of tags (vpc_tag) and searches for a tag with the "Key" set to "Name." If found, it returns the "Value" of that tag, which represents the name of the AWS resource.

get_vpc_id: An async function that returns the VPC ID associated with a given VPC name. It takes an AWS EC2 client object (aws_ec2) and the vpc_name to search for. It uses the AWS SDK to describe VPCs, iterates through the results, and returns the VPC ID that matches the provided name.

get_vpc_name: Similar to get_vpc_id, this async function returns the VPC name associated with a given VPC ID. It takes an AWS EC2 client object (aws_ec2) and the vpc_id to search for. It describes VPCs, iterates through the results, and returns the name that matches the provided VPC ID.

get_subnets: Another async function that retrieves information related to subnets within a VPC. It takes an AWS EC2 client object (aws_ec2), an array of subnet_ids, and the vpc_id. It uses the AWS SDK to describe subnets, filters them based on VPC ID and subnet IDs, and returns a map containing availability zones and public subnet IDs.

readfile: An async function that reads a file asynchronously. It takes an filepath (the absolute filename path) as an argument and returns the content of the file as a Promise. If any error occurs during reading, it throws an error.

userdata_with_errcheck: This function to process user data (commonly used for EC2 instance initialization) by adding error-checking and formatting. It splits the user data into blocks based on special comment lines (e.g., #SYSENGCOMMAND100#). Each block is followed by a check to ensure its successful execution. This processed user data is then returned as a string.

Overall, these utility functions simplify common tasks when working with AWS resources, making it easier to manage VPCs, subnets, and user data for EC2 instances.  
